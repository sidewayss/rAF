:root {
  --fade-75: 0.75;
  --bg-white:     #FAFAFA;
  --sidebar-white:#FEFEFE;
  --darkest-blue: #004;
  --dark-blue:    #007;
  --medium-blue:  #019;
  --accent-blue:  #03B;
  --green-blue:   rgb(0 56 112);
  --pitch:        #111;
  --charcoal:     #272727;
  --darker-gray:  #373737;
  --dark-gray:    #444;
  --medium-gray:  #777;
  --line-gray:    #ACACAC;

  --8th: calc(1rem / 8);
  --3-8ths: calc(3 * var(--8th));
  --5-8ths: calc(5 * var(--8th));
  --7-8ths: calc(1rem - var(--8th));

  --16th: calc(1rem / 16);
  --3-16ths: calc(3 * var(--16th));
  --5-16ths: calc(5 * var(--16th));
  --7-16ths: calc(7 * var(--16th));
  --9-16ths: calc(9 * var(--16th));
  --11-16ths:calc(11 * var(--16th));
  --15-16ths:calc(1rem - var(--16th));

  --border-gray:  var(--16th) solid #0002;
  --border-hidden:var(--16th) solid transparent;

  --btn-size: 1.75rem;
}
html * {
  font-family:"Roboto Mono", monospace;
  accent-color: var(--dark-blue);
  outline-color:var(--charcoal);
  outline-width:thin;
}
/* By tag */
body {
  margin:0;
  background-color:var(--bg-white);
  caret-color:transparent;
  opacity:0; /* javascript fades it in */
/*  filter: grayscale(100%)
          blur(3px)
          drop-shadow(1rem 1rem 1.25rem #0FFE)
          invert(12%); */
}

p {
  margin:var(--8th) 0;
  color:var(--charcoal);
  white-space:nowrap;
}
span  {
  font-weight:500;
  color:var(--dark-blue);
}
label, span {
  white-space:pre;
}
label, pre { /* I use <pre> instead of labels w/o "for" attribute */
  margin: 0;
  padding:0 var(--3-16ths) 0 0;
  color:var(--charcoal);
}
label, pre, button, check-box, check-tri {
  user-select:none;
}
/* <button>, <select>, <input> */
select, input {
  font-size:1rem;           /* they don't inherit from html */
}
input[type=range] {
  margin:0;
}
button, input[type=color],
select, input[type=number] {
  color:var(--dark-blue);
}
button, input[type=color] {
  appearance:none;          /* else iOS pads a lot, no way to control it */
  background-color:#DDDDE7;
  border:1px solid var(--line-gray);
}
select, input[type=number] {
  background-color:var(--sidebar-white);
  border:var(--border-gray);
}
input[type=text] {
  caret-color:black;
}
input.invalid {
  background-color:rgb(139 0 0 / 0.1); /* background-opacity does not exist */
  border-color: darkred;
  outline-color:darkred;
}

button:disabled {
  pointer-events:none;
  color:var(--medium-gray);
  background-color:#DDD;
}
button:hover:not(:disabled),
input[type=color]:hover {
  color:var(--accent-blue);
  background-color:#CCCCD7;
  border-color:var(--medium-gray);
}
select:hover:not(:disabled) {
  background-color:white;
  border-color:var(--line-gray);
}
select:focus, select:hover,
input:focus,  input:hover {
  z-index:1; /* helps with overlapping or adjacent borders and outline */
}
select:focus-visible,
button:focus-visible,
input[type=color]:focus-visible {
  border-color: transparent;
  outline-style:solid;
}
select:active:hover,
button:active:hover,
input[type=color]:active:hover {
  color:var(--medium-blue);
  border-color: var(--dark-blue);
  outline-style:none;
}
select:active:hover {
  background-color:transparent;
}
button:active:hover,
input[type=color]:active:hover {
  background-color:#DDDDE7;
}

/* <input type=range> - does not apply to multi */
#x { width:calc(100% - 0.25rem); }
#x:disabled {
  color:var(--medium-blue);
}

/* <button> */
.symBtn {
  font-family:"Material Symbols Rounded";
  font-size:  1.5rem;
  line-height:1.5rem;
  padding:    0;
  width: var(--btn-size);
  height:var(--btn-size);
  border:var(--border-gray);
}

/* <select>, <span>, <p>, #mid - hi/lo */
.named { width:15ch; } /* <select> */
select.lo, span.lo, #mid.lo { /* #mid in easings only */
  color:var(--charcoal);
}
span.lo, #mid.lo {
  font-weight:400;
}
select.hi, span.hi {
  color:var(--dark-blue); /* unnecessary for <span>, but consistent */
}
p.lo {  /* unchecked, false/indeterminate - OFF */
  color:var(--medium-gray);
}
p.hi { /* checked, true/indeterminate - ON */
  color:var(--darkest-blue); /* no change... */
}

/* <check-box> */
check-box, check-tri {
  cursor:default;
  fill:none;
  stroke:var(--charcoal);
  color: var(--charcoal);
}
check-box[disabled], check-box[disabled][checked],
check-tri[disabled], check-tri[disabled][checked],
label[disabled],
select:disabled {
  stroke:var(--medium-gray);
  color: var(--medium-gray);
}
check-box[checked],
check-tri[value]::part(check) {
  fill:  white;
  stroke:var(--dark-blue);
  color: var(--dark-blue);
}
check-box:hover, check-tri:hover::part(check),
check-box[checked]:hover {
  fill-opacity:0.05;
  fill:  var(--accent-blue);
  color: var(--medium-blue);
}
check-box:active, check-tri:active::part(check),
check-box[checked]:active,
check-tri:not([value])::part(default) {
  fill:white;
  stroke:var(--medium-blue);
  color: var(--medium-blue);
}
check-tri[value]::part(default) {
  fill-opacity:0.05;
  fill:  var(--medium-gray);
  stroke:var(--medium-gray);
}

/* <state-btn> - #play, #stop */
state-btn {
  opacity:0.9;
  stroke-width:3px;
  fill   :var(--dark-blue);
  stroke :var(--dark-blue);
  stroke-linejoin:round;
  stroke-linecap :round;
}
state-btn:hover {
  opacity:1;
  stroke-width:4px;
  fill   :var(--accent-blue);
  stroke :var(--accent-blue);
}
state-btn:active {
  stroke-width:3px;
  fill:none;
}
state-btn[disabled] {
  opacity:0.15;
  fill   :var(--pitch);
  stroke :var(--pitch);
}
state-btn.hi {
  opacity:1;
}

/* <div> */
.row {
  display:flex;
  align-items:center;
  min-height:1.5rem;  /* iOS requires more height for some rows */
}
.col {
  display:flex;
  flex-direction:column;
}
.flex    { display:flex; }
.end     { justify-content:flex-end; }
.center  { justify-content:center;   }
.around  { justify-content:space-around ; }
.between { justify-content:space-between; }
.evenly  { justify-content:space-evenly;  }

.align-start  { align-items:flex-start; }
.align-end    { align-items:flex-end; }
.align-center { align-items:center; }

.grow { flex-grow:1 }

/* <label> */
.lbl-right {
  padding:0;
  margin:0 0 0 0.25rem;
  color:var(--darkest-blue);
}
.label {
  margin:0;
}

/* General - rem values in 1/16ths per 1rem = 16px */
.mt1-2  { margin-top:    0.5rem; }
.mt5-16 { margin-top:    var(--5-16ths); }
.mb3-8  { margin-bottom: var(--3-8ths);  }
.mr1    { margin-right:  1rem;  }
.mr1-2  { margin-right:  0.5rem }
.ml5-8  { margin-left:   var(--5-8ths);  }
.mr3-16 { margin-right:  var(--3-16ths); }
.ml1-2  { margin-left:   0.5rem }
.ml3-8  { margin-left:   var(--3-8ths); }
.ml5-16 { margin-left:   var(--5-16ths); }
.ml3-16 { margin-left:   var(--3-16ths); }
.ml1ch  { margin-left:   1ch;  }
.ml0    { margin-left:   0; }

.mt1px, input.mt1px { margin-top: 1px; }

.pt5-8  { padding-top:   var(--5-8ths);  }
.pt3-8  { padding-top:   var(--3-8ths);  }
.pb3-8  { padding-bottom:var(--3-8ths);  }
.pb5-8  { padding-bottom:var(--5-8ths);  }
.pl3-8  { padding-left:  var(--3-8ths);  }
.pl3-16 { padding-left:  var(--3-16ths); }
.pr3-16 { padding-right: var(--3-16ths); }

.black, span.black {
  color:black;
}
.bt {
  border-top:1px solid var(--line-gray);
  padding-top:0.25rem;
}
.bt-dots {
  border-top-style:dotted;
}
.bb {
  border-bottom:1px solid;
}
.slash {
  font-family:sans-serif;
  margin:0 0.25rem;
}
.z-1 {
  z-index:1;
}
.notMono {
  font-family:"Roboto", sans-serif;
}

/* Specialty */
#copied {
  pointer-events:none;
  position:absolute;
  opacity:0;
  cursor:default;
  font-family:sans-serif;
  font-size:calc(13 * var(--16th));
  font-weight:bold;
  color:white;
  background-color:var(--medium-blue);
  border:1px solid var(--dark-blue);
  border-radius:10%;
  padding:var(--3-16ths);
}
#msgBox {
  margin:0 auto; /* javascript sets top */
  padding:var(--7-8ths);
}
#msgBox::backdrop {
  background-color:#1113;
}
#title, #msg {
  white-space:pre-wrap;
  line-height:1.25rem;
  margin:var(--8th) 0 var(--8th) 0.5rem;
  color:black;
}
#title{
  font-weight:500;
  padding-top:0.125rem;
}
#msg {
  font-weight:400;
}
#close {
  width:fit-content;
  align-self:center;
  margin-top:0.5rem;
}
#dialog::backdrop {
  backdrop-filter:blur(var(--16th));
  background-color:#AAA7;
}

/*   Open state of a dialog  */
dialog[open] {
  opacity: 1;
}

/*   Closed state of a dialog   */
dialog {
  opacity: 0;
  transition: opacity 1s;
}

/*   Before-open state  */
/* Needs to be after the previous dialog[open] rule to take effect,
    as the specificity is the same */
@starting-style {
  dialog[open] {
    opacity: 0;
  }
}